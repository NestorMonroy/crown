{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyDY7h1aEqsiJVouyzTRhA8KQPdeymC2v5E\",\n  authDomain: \"crown-bf5bf.firebaseapp.com\",\n  databaseURL: \"https://crown-bf5bf.firebaseio.com\",\n  projectId: \"crown-bf5bf\",\n  storageBucket: \"crown-bf5bf.appspot.com\",\n  messagingSenderId: \"4633353727\",\n  appId: \"1:4633353727:web:2f00f8450451c33d2b9bca\"\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  /* query object / documentRef objects \n      documentRef returns a documentSnapshop object (CRUD)\n      collectionRef returns a querySnapshop object \n   */\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`); //const collectionRef = firestore.collection('users');\n\n  const snapShot = await userRef.get(); //const colletionSnapshot = await collectionRef.get();\n  //console.log({ collection: colletionSnapshot.docs.map(doc => doc.data()) });\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n  /* .batch return map */\n\n  const batch = firebase.firestore().batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/home/nestormonroy/Documents/Projects/crown/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AAEA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,6BAFC;AAGbC,EAAAA,WAAW,EAAE,oCAHA;AAIbC,EAAAA,SAAS,EAAE,aAJE;AAKbC,EAAAA,aAAa,EAAE,yBALF;AAMbC,EAAAA,iBAAiB,EAAE,YANN;AAObC,EAAAA,KAAK,EAAE;AAPM,CAAf;AAUAR,QAAQ,CAACS,aAAT,CAAuBR,MAAvB;AAEA,OAAO,MAAMS,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe;AAEf;;;;;AAKA,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB,CAR2E,CAS3E;;AAEA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB,CAX2E,CAY3E;AACA;;AAEA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAI;AACF,YAAMV,OAAO,CAACW,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGV;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOa,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACD;AACF;;AAED,SAAOf,OAAP;AACD,CA/BM;AAiCP,OAAO,MAAMgB,yBAAyB,GAAG,CAACC,aAAD,EAAgBC,YAAhB,KAAiC;AACxE,QAAMC,aAAa,GAAGlB,SAAS,CAACmB,UAAV,CAAqBH,aAArB,CAAtB;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAYK,aAAZ;AAEA;;AACA,QAAME,KAAK,GAAGlC,QAAQ,CAACc,SAAT,GAAqBoB,KAArB,EAAd;AACAH,EAAAA,YAAY,CAACI,OAAb,CAAqBC,GAAG,IAAI;AAC1B,UAAMC,SAAS,GAAGL,aAAa,CAACjB,GAAd,EAAlB;AAGD,GAJD;AAOD,CAbM;AAcP,OAAO,MAAMuB,IAAI,GAAGtC,QAAQ,CAACsC,IAAT,EAAb;AACP,OAAO,MAAMxB,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AAEP,MAAMyB,QAAQ,GAAG,IAAIvC,QAAQ,CAACsC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAevC,QAAf","sourcesContent":["import firebase from 'firebase/app';\n\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n  apiKey: \"AIzaSyDY7h1aEqsiJVouyzTRhA8KQPdeymC2v5E\",\n  authDomain: \"crown-bf5bf.firebaseapp.com\",\n  databaseURL: \"https://crown-bf5bf.firebaseio.com\",\n  projectId: \"crown-bf5bf\",\n  storageBucket: \"crown-bf5bf.appspot.com\",\n  messagingSenderId: \"4633353727\",\n  appId: \"1:4633353727:web:2f00f8450451c33d2b9bca\"\n}\n\nfirebase.initializeApp(config);\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  /* query object / documentRef objects \n      documentRef returns a documentSnapshop object (CRUD)\n      collectionRef returns a querySnapshop object \n\n  */\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  //const collectionRef = firestore.collection('users');\n  \n  const snapShot = await userRef.get();\n  //const colletionSnapshot = await collectionRef.get();\n  //console.log({ collection: colletionSnapshot.docs.map(doc => doc.data()) });\n\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\n\nexport const addCollectionAndDocuments = (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef)\n\n  /* .batch return map */\n  const batch = firebase.firestore().batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    \n\n  })\n\n\n}\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}