{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nimport ShopActionTypes from './shop.types';\nexport function* fetchCollectionsAsync() {\n  yield console.log('I am fired');\n  const collectionRef = firestore.collection('collections');\n  const snapshot = yi;\n  /*   collectionRef\n      .get()\n      .then(snapshot => {\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n        dispatch(fetchCollectionsSuccess(collectionsMap));\n      })\n      .catch(error => dispatch(fetchCollectionsFailure(error.message))); */\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/home/nestormonroy/Documents/Projects/crown/src/redux/shop/shop.sagas.js"],"names":["takeEvery","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","ShopActionTypes","fetchCollectionsAsync","console","log","collectionRef","collection","snapshot","yi","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,SAASC,SAAT,EAAoBC,+BAApB,QAA0D,+BAA1D;AACA,SACIC,uBADJ,EAEIC,uBAFJ,QAGO,gBAHP;AAIA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,qBAAV,GAAiC;AACpC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;AACA,QAAMC,aAAa,GAAGR,SAAS,CAACS,UAAV,CAAqB,aAArB,CAAtB;AAEA,QAAMC,QAAQ,GAAGC,EAAjB;AAEF;;;;;;;AAQD;AAED,OAAO,UAAUC,qBAAV,GAAiC;AACpC,QAAMb,SAAS,CACXK,eAAe,CAACS,uBADL,EAEXR,qBAFW,CAAf;AAIH","sourcesContent":["import { takeEvery } from 'redux-saga/effects'\nimport { firestore, convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils';\nimport { \n    fetchCollectionsSuccess,\n    fetchCollectionsFailure \n} from './shop.actions'\nimport ShopActionTypes from './shop.types'\n\nexport function* fetchCollectionsAsync(){\n    yield console.log('I am fired');\n    const collectionRef = firestore.collection('collections');\n\n    const snapshot = yi\n\n  /*   collectionRef\n      .get()\n      .then(snapshot => {\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n        dispatch(fetchCollectionsSuccess(collectionsMap));\n      })\n      .catch(error => dispatch(fetchCollectionsFailure(error.message))); */\n\n}\n\nexport function* fetchCollectionsStart(){\n    yield takeEvery(\n        ShopActionTypes.FETCH_COLLECTIONS_START, \n        fetchCollectionsAsync\n    );\n}"]},"metadata":{},"sourceType":"module"}