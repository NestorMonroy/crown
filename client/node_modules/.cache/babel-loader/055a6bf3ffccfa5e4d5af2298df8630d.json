{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTYpes from './user.types';\nimport { signInSuccess, signInFailure } from './user.actions';\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/firebase.utils';\nexport function* signInWithGoogle() {\n  try {\n    const user = yield auth.signInWithPopup(googleProvider);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    })); //console.log(user)\n  } catch (e) {\n    yield put(signInFailure(e));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    console.log(user);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (e) {\n    yield put(signInFailure(e));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTYpes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTYpes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/home/nestormonroy/Documents/Projects/crown/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTYpes","signInSuccess","signInFailure","auth","googleProvider","createUserProfileDocument","signInWithGoogle","user","signInWithPopup","userRef","userSnapshot","get","id","data","e","signInWithEmail","payload","email","password","signInWithEmailAndPassword","console","log","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SACIC,aADJ,EAEIC,aAFJ,QAGO,gBAHP;AAKA,SACIC,IADJ,EAEIC,cAFJ,EAGIC,yBAHJ,QAIO,+BAJP;AAOA,OAAO,UAAUC,gBAAV,GAA4B;AAC/B,MAAI;AACA,UAAMC,IAAI,GAAG,MAAMJ,IAAI,CAACK,eAAL,CAAqBJ,cAArB,CAAnB;AACA,UAAMK,OAAO,GAAG,MAAMV,IAAI,CAACM,yBAAD,EAA4BE,IAA5B,CAA1B;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMd,GAAG,CAACI,aAAa,CAAC;AAAEW,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAAd,CAAT,CAJA,CAKA;AACH,GAND,CAME,OAAOC,CAAP,EAAU;AACR,UAAMjB,GAAG,CAACK,aAAa,CAACY,CAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AAC/D,MAAI;AACA,UAAM;AAAEX,MAAAA;AAAF,QAAW,MAAMJ,IAAI,CAACgB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMT,OAAO,GAAG,MAAMV,IAAI,CAACM,yBAAD,EAA4BE,IAA5B,CAA1B;AACAa,IAAAA,OAAO,CAACC,GAAR,CAAYd,IAAZ;AAEA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMd,GAAG,CACLI,aAAa,CAAC;AAACW,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAlB;AAAsB,SAAGF,YAAY,CAACG,IAAb;AAAzB,KAAD,CADR,CAAT;AAGH,GATD,CASE,OAAOC,CAAP,EAAU;AACR,UAAMjB,GAAG,CAACK,aAAa,CAACY,CAAD,CAAd,CAAT;AACH;AACF;AAGH,OAAO,UAAUQ,mBAAV,GAAgC;AACnC,QAAM1B,UAAU,CAACI,eAAe,CAACuB,oBAAjB,EAAuCjB,gBAAvC,CAAhB;AACH;AAED,OAAO,UAAUkB,kBAAV,GAA+B;AAClC,QAAM5B,UAAU,CAACI,eAAe,CAACyB,mBAAjB,EAAsCV,eAAtC,CAAhB;AACH;AAED,OAAO,UAAUW,SAAV,GAAqB;AAC3B,QAAM5B,GAAG,CAAC,CACNC,IAAI,CAACuB,mBAAD,CADE,EAENvB,IAAI,CAACyB,kBAAD,CAFE,CAAD,CAAT;AAIA","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTYpes from './user.types';\n\nimport { \n    signInSuccess, \n    signInFailure,  \n} from './user.actions';\n\nimport {\n    auth, \n    googleProvider, \n    createUserProfileDocument  \n} from '../../firebase/firebase.utils';\n\n\nexport function* signInWithGoogle(){\n    try {\n        const user = yield auth.signInWithPopup(googleProvider);\n        const userRef = yield call(createUserProfileDocument, user);\n        const userSnapshot = yield userRef.get();\n        yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data()}))\n        //console.log(user)\n    } catch (e) {\n        yield put(signInFailure(e));\n    }\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n    try {\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\n        const userRef = yield call(createUserProfileDocument, user);\n        console.log(user);\n\n        const userSnapshot = yield userRef.get();\n        yield put(\n            signInSuccess({id: userSnapshot.id, ...userSnapshot.data() })\n        )\n    } catch (e) {\n        yield put(signInFailure(e))\n    }\n  }\n  \n\nexport function* onGoogleSignInStart() {\n    yield takeLatest(UserActionTYpes.GOOGLE_SIGN_IN_START, signInWithGoogle)\n}\n\nexport function* onEmailSignInStart() {\n    yield takeLatest(UserActionTYpes.EMAIL_SIGN_IN_START, signInWithEmail)\n}\n\nexport function* userSagas(){\n yield all([\n     call(onGoogleSignInStart), \n     call(onEmailSignInStart) \n    ])\n}"]},"metadata":{},"sourceType":"module"}