{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTYpes from './user.types';\nimport { signInSuccess, signInFailure } from './user.actions';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (e) {\n    yield put(signInFailure(e));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const user = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (e) {\n    yield put(signInFailure(e));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (e) {\n    yield put(signInFailure(e));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (e) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTYpes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTYpes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/home/nestormonroy/Documents/Projects/crown/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTYpes","signInSuccess","signInFailure","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","e","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","error","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","UserActionTypes","CHECK_USER_SESSION","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SACIC,aADJ,EAEIC,aAFJ,QAGO,gBAHP;AAKA,SACIC,IADJ,EAEIC,cAFJ,EAGIC,yBAHJ,EAIIC,cAJJ,QAKO,+BALP;AAQA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA4CC,cAA5C,EAA4D;AAC/D,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMX,IAAI,CACxBM,yBADwB,EAExBG,QAFwB,EAGxBC,cAHwB,CAA1B;AAKA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMf,GAAG,CAACI,aAAa,CAAC;AAAEY,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAAd,CAAT;AACD,GARD,CAQE,OAAOC,CAAP,EAAU;AACV,UAAMlB,GAAG,CAACK,aAAa,CAACa,CAAD,CAAd,CAAT;AACD;AACF;AAGH,OAAO,UAAUC,gBAAV,GAA4B;AAC/B,MAAI;AACA,UAAMC,IAAI,GAAG,MAAMd,IAAI,CAACe,eAAL,CAAqBd,cAArB,CAAnB;AACA,UAAMG,uBAAuB,CAACU,IAAD,CAA7B;AACH,GAHD,CAGE,OAAOF,CAAP,EAAU;AACR,UAAMlB,GAAG,CAACK,aAAa,CAACa,CAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUI,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AAC/D,MAAI;AACA,UAAM;AAAEL,MAAAA;AAAF,QAAW,MAAMd,IAAI,CAACoB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMf,uBAAuB,CAACU,IAAD,CAA7B;AACH,GAHD,CAGE,OAAOF,CAAP,EAAU;AACR,UAAMlB,GAAG,CAACK,aAAa,CAACa,CAAD,CAAd,CAAT;AACH;AACF;AAED,OAAO,UAAUS,mBAAV,GAAgC;AACrC,MAAI;AACF,UAAMhB,QAAQ,GAAG,MAAMF,cAAc,EAArC;AACA,QAAI,CAACE,QAAL,EAAe;AACf,UAAMD,uBAAuB,CAACC,QAAD,CAA7B;AACD,GAJD,CAIE,OAAOO,CAAP,EAAU;AACV,UAAMlB,GAAG,CAACK,aAAa,CAACuB,KAAD,CAAd,CAAT;AACD;AACF;AAEH,OAAO,UAAUC,mBAAV,GAAgC;AACnC,QAAM9B,UAAU,CAACI,eAAe,CAAC2B,oBAAjB,EAAuCX,gBAAvC,CAAhB;AACH;AAED,OAAO,UAAUY,kBAAV,GAA+B;AAClC,QAAMhC,UAAU,CAACI,eAAe,CAAC6B,mBAAjB,EAAsCV,eAAtC,CAAhB;AACH;AAKD,OAAO,UAAUW,kBAAV,GAA+B;AAClC,QAAMlC,UAAU,CAACmC,eAAe,CAACC,kBAAjB,EAAqCR,mBAArC,CAAhB;AACD;AAEH,OAAO,UAAUS,SAAV,GAAqB;AAC3B,QAAMnC,GAAG,CAAC,CACNC,IAAI,CAAC2B,mBAAD,CADE,EAEN3B,IAAI,CAAC6B,kBAAD,CAFE,CAAD,CAAT;AAIA","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTYpes from './user.types';\n\nimport { \n    signInSuccess, \n    signInFailure,  \n} from './user.actions';\n\nimport {\n    auth, \n    googleProvider, \n    createUserProfileDocument,\n    getCurrentUser\n} from '../../firebase/firebase.utils';\n\n\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n    try {\n      const userRef = yield call(\n        createUserProfileDocument,\n        userAuth,\n        additionalData\n      );\n      const userSnapshot = yield userRef.get();\n      yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n    } catch (e) {\n      yield put(signInFailure(e));\n    }\n  }\n\n\nexport function* signInWithGoogle(){\n    try {\n        const user = yield auth.signInWithPopup(googleProvider);\n        yield getSnapshotFromUserAuth(user);\n    } catch (e) {\n        yield put(signInFailure(e));\n    }\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n    try {\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\n        yield getSnapshotFromUserAuth(user);\n    } catch (e) {\n        yield put(signInFailure(e))\n    }\n  }\n  \n  export function* isUserAuthenticated() {\n    try {\n      const userAuth = yield getCurrentUser();\n      if (!userAuth) return;\n      yield getSnapshotFromUserAuth(userAuth);\n    } catch (e) {\n      yield put(signInFailure(error));\n    }\n  }\n\nexport function* onGoogleSignInStart() {\n    yield takeLatest(UserActionTYpes.GOOGLE_SIGN_IN_START, signInWithGoogle)\n}\n\nexport function* onEmailSignInStart() {\n    yield takeLatest(UserActionTYpes.EMAIL_SIGN_IN_START, signInWithEmail)\n}\n\n\n\n\nexport function* onCheckUserSession() {\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n  }\n  \nexport function* userSagas(){\n yield all([\n     call(onGoogleSignInStart), \n     call(onEmailSignInStart) \n    ])\n}"]},"metadata":{},"sourceType":"module"}